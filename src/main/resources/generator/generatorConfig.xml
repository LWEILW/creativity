<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<!-- 配置生成器 -->
<generatorConfiguration>

    <!--id:必选，上下文id，用于在生成错误时提示-->
    <context id="mysql" targetRuntime="MyBatis3">

        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>

        <!-- 对注释进行控制 -->
        <commentGenerator>
            <!-- suppressDate是去掉生成日期那行注释 -->
            <property name="suppressDate" value="true"/>
            <!-- suppressAllComments是去掉所有的注解 -->
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>

        <!--jdbc的数据库连接 -->
        <jdbcConnection
                driverClass="com.mysql.jdbc.Driver"
                connectionURL="jdbc:mysql://139.196.72.164:3306/test"
                userId="root"
                password="123456">
        </jdbcConnection>

        <!-- java类型处理器
        用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；
        注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型；
        -->
        <javaTypeResolver type="org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl">
            <!--
                true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
                false：默认,
                    scale>0;length>18：使用BigDecimal;
                    scale=0;length[10,18]：使用Long；
                    scale=0;length[5,9]：使用Integer；
                    scale=0;length<5：使用Short；
             -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>


        <!-- java模型创建器，是必须要的元素
            负责：1，key类（见context的defaultModelType）；2，java类；3，查询类
            targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；
            targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录
         -->
        <javaModelGenerator targetPackage="com.example.demo.entity" targetProject="src/main/java">
            <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="true"/>
            <!-- 是否对model添加 构造函数 -->
            <property name="constructorBased" value="true"/>
            <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
            <property name="trimStrings" value="true"/>
            <!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
            <property name="immutable" value="false"/>
        </javaModelGenerator>

        <!-- 生成SQL map的XML文件生成器，
            注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），
                或者只使用Mapper接口+Annotation，
                所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置
            targetPackage/targetProject:同javaModelGenerator
         -->
        <sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>


        <!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口
            targetPackage/targetProject:同javaModelGenerator
            type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
                1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
                2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
                3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
            注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
        -->
        <javaClientGenerator targetPackage="com.example.demo.dao" type="XMLMAPPER" targetProject="src/main/java">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>



        <!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素
            tableName（必要）：要生成对象的表名；
            domainObjectName 给表对应的 model 起名字
            注意：大小写敏感问题。
         -->
        <table tableName="user" domainObjectName="User">

            <!--用来修改表中某个列的属性,一个table元素中可以有多个columnOverride元素哈.
                property属性来指定列要生成的属性名称.
             -->
            <!--<columnOverride column="username" property="userName" />-->
        </table>

        <!--<table tableName="user" domainObjectName="User"/>-->
        <!--<table tableName="games" domainObjectName="Games"/>-->
        <!--<table tableName="mood" domainObjectName="Mood"/>-->
        <!--<table tableName="news" domainObjectName="News"/>-->


    </context>

</generatorConfiguration>







<!--<?xml version="1.0" encoding="UTF-8"?>-->
<!--<!DOCTYPE generatorConfiguration-->
        <!--PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"-->
        <!--"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">-->

<!--<generatorConfiguration>-->
    <!--&lt;!&ndash;导入属性配置&ndash;&gt;-->
    <!--<properties resource="application-dev.properties"></properties>-->

    <!--&lt;!&ndash;指定特定数据库的jdbc驱动jar包的位置&ndash;&gt;-->
    <!--&lt;!&ndash;<classPathEntry location="${db.driverLocation}"/>&ndash;&gt;-->

    <!--<context id="default" targetRuntime="MyBatis3">-->

        <!--&lt;!&ndash; optional，旨在创建class时，对注释进行控制 &ndash;&gt;-->
        <!--<commentGenerator>-->
            <!--<property name="suppressDate" value="true"/>-->
            <!--<property name="suppressAllComments" value="true"/>-->
        <!--</commentGenerator>-->

        <!--&lt;!&ndash;jdbc的数据库连接 &ndash;&gt;-->
        <!--<jdbcConnection-->
                <!--driverClass="${spring.datasource.driverClassName}"-->
                <!--connectionURL="${spring.datasource.url}"-->
                <!--userId="${spring.datasource.username}"-->
                <!--password="${spring.datasource.password}">-->
        <!--</jdbcConnection>-->


        <!--&lt;!&ndash; 非必需，类型处理器，在数据库类型和java类型之间的转换控制 &ndash;&gt;-->
        <!--<javaTypeResolver>-->
            <!--<property name="forceBigDecimals" value="false"/>-->
        <!--</javaTypeResolver>-->


        <!--&lt;!&ndash; Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类-->
            <!--targetPackage     指定生成的model生成所在的包名-->
            <!--targetProject     指定在该项目下所在的路径-->
        <!--&ndash;&gt;-->
        <!--<javaModelGenerator targetPackage="com.sunshine.entity" targetProject="./src/main/java">-->
            <!--&lt;!&ndash; 是否允许子包，即targetPackage.schemaName.tableName &ndash;&gt;-->
            <!--<property name="enableSubPackages" value="false"/>-->
            <!--&lt;!&ndash; 是否对model添加 构造函数 &ndash;&gt;-->
            <!--<property name="constructorBased" value="true"/>-->
            <!--&lt;!&ndash; 是否对类CHAR类型的列的数据进行trim操作 &ndash;&gt;-->
            <!--<property name="trimStrings" value="true"/>-->
            <!--&lt;!&ndash; 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 &ndash;&gt;-->
            <!--<property name="immutable" value="false"/>-->
        <!--</javaModelGenerator>-->

        <!--&lt;!&ndash;mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 &ndash;&gt;-->
        <!--<sqlMapGenerator targetPackage="mapper" targetProject="./src/main/resources">-->
            <!--<property name="enableSubPackages" value="false"/>-->
        <!--</sqlMapGenerator>-->

        <!--&lt;!&ndash; 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码-->
                <!--type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象-->
                <!--type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象-->
                <!--type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口-->
        <!--&ndash;&gt;-->

        <!--&lt;!&ndash; targetPackage：mapper接口dao生成的位置 &ndash;&gt;-->
        <!--<javaClientGenerator type="XMLMAPPER" targetPackage="com.sunshine.dao" targetProject="./src/main/java">-->
            <!--&lt;!&ndash; enableSubPackages:是否让schema作为包的后缀 &ndash;&gt;-->
            <!--<property name="enableSubPackages" value="false" />-->
        <!--</javaClientGenerator>-->



        <!--<table tableName="userIntroduce" domainObjectName="UserIntroduce" >-->
            <!--<property name="useActualColumnNames" value="true" />-->
        <!--</table>-->

        <!--&lt;!&ndash;<table tableName="itemIntroduce" domainObjectName="ItemIntroduce" >&ndash;&gt;-->
            <!--&lt;!&ndash;<property name="useActualColumnNames" value="true" />&ndash;&gt;-->
        <!--&lt;!&ndash;</table>&ndash;&gt;-->

    <!--</context>-->
<!--</generatorConfiguration>-->